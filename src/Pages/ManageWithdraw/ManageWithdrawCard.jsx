import { useState } from "react";
import useAxiosSecure from "../../Hooks/useAxiosSecure";
import Swal from "sweetalert2";
import { Trash2 } from "lucide-react"; // ‚úÖ ‡¶è‡¶á ‡¶≤‡¶æ‡¶á‡¶®‡ßá Trash2 Icon import ‡¶ï‡¶∞‡¶§‡ßá ‡¶≠‡ßÅ‡¶≤‡¶≤‡ßá error ‡¶¶‡¶ø‡¶¨‡ßá

const ManageWithdrawCard = ({ withdraw, refetch }) => {
    const axiosSecure = useAxiosSecure();
    const {
        _id,
        customer,
        idNumber,
        amount,
        walletNumber,
        withdrawCode,
        status,
        createdAt,
        image
    } = withdraw;

    const [currentStatus, setCurrentStatus] = useState(status);

    // üîÑ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
    const handleLocalStatusChange = async (newStatus) => {
        setCurrentStatus(newStatus);
        try {
            const response = await axiosSecure.patch(`/update-withdraw-status/${_id}`, { status: newStatus });
            if (response.status === 200) {
                Swal.fire("‡¶∏‡¶´‡¶≤!", "‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", "success");
                refetch();
            } else {
                Swal.fire("‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•!", "‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§", "error");
            }
        } catch (error) {
            Swal.fire("‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø!", `‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: ${error.message}`, "error");
        }
    };

    // ‚ùå ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ (Demo PopUp)
    const handleDelete = () => {
        Swal.fire({
            title: '‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§?',
            text: "‡¶è‡¶á ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶¨‡ßá!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: '‡¶π‡ßç‡¶Ø‡¶æ‡¶Å, ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®!'
        }).then(async (result) => {
            if (result.isConfirmed) {
                try {
                    const res = await axiosSecure.delete(`/delete-withdraw/${_id}`);
                    if (res.data.deletedCount > 0) {
                        Swal.fire('‡¶°‡¶ø‡¶≤‡¶ø‡¶ü‡ßá‡¶°!', '‡¶°‡¶æ‡¶ü‡¶æ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§', 'success');
                        refetch();
                    } else {
                        Swal.fire('‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•!', '‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§', 'error');
                    }
                } catch (err) {
                    Swal.fire('‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø!', err.message, 'error');
                }
            }
        });
    };

    // üìÖ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡¶ø‡¶Ç
    const date = new Date(createdAt).toLocaleString("bn-BD", {
        dateStyle: "medium",
        timeStyle: "short",
        timeZone: "Asia/Dhaka"
    });

    return (
        <div className="flex justify-between items-center bg-white  shadow p-4 mb-3">
            {/* Wallet Icon Part */}
            <div className="flex items-center gap-3">
                <div className="w-10 h-10 flex items-center justify-center bg-purple-100 text-purple-600 rounded-full font-bold overflow-hidden">
                    <img src={image} alt="Wallet" className="w-full h-full object-cover" />
                </div>
                <div>
                    <h3 className="font-semibold text-gray-800">{customer?.email}</h3>
                    <p className="text-xs text-gray-500">{walletNumber}</p>
                    <p className="text-xs text-gray-400">ID: {idNumber}</p>
                    <p className="text-xs text-gray-600">Code: {withdrawCode}</p>
                    <p className="text-xs text-gray-500">{date}</p>
                </div>
            </div>

            {/* Amount & Status Part */}
            <div className="text-right space-y-1">
                <p className="text-base font-bold text-gray-800">{amount}‡ß≥</p>

                {currentStatus === "‡¶∏‡¶´‡¶≤" ? (
                    <span className="text-green-600 bg-green-100 text-xs px-2 py-1 rounded-full">‡¶∏‡¶´‡¶≤</span>
                ) : currentStatus === "‡¶¨‡¶æ‡¶§‡¶ø‡¶≤" ? (
                    <span className="text-red-600 bg-red-100 text-xs px-2 py-1 rounded-full">‡¶¨‡¶æ‡¶§‡¶ø‡¶≤</span>
                ) : (
                    <span className="text-yellow-600 bg-yellow-100 text-xs px-2 py-1 rounded-full">{currentStatus}</span>
                )}

                {/* ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶¨‡¶ï‡ßç‡¶∏ */}
                <div>
                    <select
                        className={`text-xs mt-2 px-2 py-1 rounded outline-none border
                            ${currentStatus === "‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶Æ‡¶æ‡¶®"
                                ? "bg-yellow-100 text-yellow-800"
                                : currentStatus === "‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ß‡ßÄ‡¶®"
                                ? "bg-blue-100 text-blue-800"
                                : currentStatus === "‡¶∏‡¶´‡¶≤"
                                ? "bg-green-100 text-green-800"
                                : currentStatus === "‡¶¨‡¶æ‡¶§‡¶ø‡¶≤"
                                ? "bg-red-100 text-red-800"
                                : "bg-gray-100 text-gray-800"}`}
                        value={currentStatus}
                        onChange={(e) => handleLocalStatusChange(e.target.value)}
                    >
                        <option value="‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶Æ‡¶æ‡¶®">‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶Æ‡¶æ‡¶®</option>
                        <option value="‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ß‡ßÄ‡¶®">‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ß‡ßÄ‡¶®</option>
                        <option value="‡¶∏‡¶´‡¶≤">‡¶∏‡¶´‡¶≤</option>
                        <option value="‡¶¨‡¶æ‡¶§‡¶ø‡¶≤">‡¶¨‡¶æ‡¶§‡¶ø‡¶≤</option>
                    </select>
                </div>

                {/* ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶¨‡¶æ‡¶ü‡¶® */}
                {status !== "‡¶∏‡¶´‡¶≤" && (
                    <button
                        onClick={handleDelete}
                        className="text-xs mt-2 px-2 py-1 rounded bg-red-100 text-red-700 hover:bg-red-200 transition"
                    >
                        <Trash2 size={14} className="inline-block mr-1" /> ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
                    </button>
                )}
            </div>
        </div>
    );
};

export default ManageWithdrawCard;
